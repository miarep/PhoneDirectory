{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/department/department.component.ts","webpack:///src/app/department/department.component.html","webpack:///src/app/employee/employee.component.ts","webpack:///src/app/employee/employee.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/nav-menu/nav-menu.component.ts","webpack:///src/app/nav-menu/nav-menu.component.html","webpack:///src/app/service/apiheaderinterceptor.ts","webpack:///src/app/service/auth.service.ts","webpack:///src/app/service/data.service.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","auth","currentYear","Date","getFullYear","$event","isAuthenticated","onRouterOutletActivate","selector","templateUrl","styleUrls","tokenGetter","localStorage","getItem","AppModule","provide","useValue","useClass","multi","forRoot","path","component","pathMatch","imports","declarations","bootstrap","providers","DepartmentComponent","empEvent","employee","emit","departments","EmployeeComponent","dataService","emp","getEmployee","ngOnInit","getEmployeeById","subscribe","data","date","toLocaleDateString","HomeComponent","authService","route","loadDepartments","navigate","getRootDepartments","showEmployee","Account","email","password","LoginComponent","router","loginForm","login","res","error","alert","SignIn","NavMenuComponent","isauthenticated","authorizeEmployee","getGetAuthorizeEmployee","logout","ApiHeaderInterceptor","request","next","token","getToken","bearer","clone","setHeaders","handle","pipe","event","ACCESS_TOKEN_KEY","AuthService","http","jwtHelper","url","post","setItem","access_token","isTokenExpired","removeItem","providedIn","DataService","departmentsUrl","employeeUrl","get","platform","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\r\nimport { AuthService } from './service/auth.service'\r\n\r\n@Component({\r\n    selector: 'app',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.css']\r\n    \r\n})\r\nexport class AppComponent {\r\n\r\n    currentYear: number = new Date().getFullYear();\r\n\r\n    isAuthenticated: boolean;\r\n\r\n    constructor(private auth: AuthService) {\r\n    }\r\n\r\n    onRouterOutletActivate($event) {\r\n        this.isAuthenticated = this.auth.isAuthenticated();\r\n    }\r\n}","<body>\r\n    <div class=\"wrapper\">\r\n        <header>\r\n            <app-nav-menu [isAuthenticated]=\"isAuthenticated\"></app-nav-menu>\r\n        </header>\r\n        <main>\r\n            <router-outlet (activate)=\"onRouterOutletActivate($event)\"></router-outlet>\r\n        </main>\r\n        <footer class=\"container bg-light\">\r\n            <div class=\"container\">\r\n                <span>г. Хабаровск {{currentYear}}</span>\r\n            </div>\r\n        </footer>\r\n    </div>    \r\n</body>\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NavMenuComponent } from '../app/nav-menu/nav-menu.component';\r\nimport { DepartmentComponent } from '../app/department/department.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { APP_BASE_HREF } from '@angular/common';\r\nimport { JwtModule } from '@auth0/angular-jwt';\r\nimport { ACCESS_TOKEN_KEY } from './service/auth.service'\r\nimport { JwtHelperService, JWT_OPTIONS } from '@auth0/angular-jwt';\r\nimport { ApiHeaderInterceptor } from './service/apiheaderinterceptor';\r\nimport { EmployeeComponent } from './employee/employee.component'\r\n\r\n\r\nexport function tokenGetter() {\r\n    return localStorage.getItem(ACCESS_TOKEN_KEY)\r\n}\r\n\r\n@NgModule({\r\n    imports: [\r\n        BrowserModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        BrowserAnimationsModule,\r\n        RouterModule.forRoot([\r\n            { path: '', component: HomeComponent, pathMatch: 'full' },\r\n            { path: 'login', component: LoginComponent },\r\n\r\n        ]),\r\n        JwtModule\r\n    ],\r\n    declarations: [AppComponent, NavMenuComponent, DepartmentComponent, HomeComponent, LoginComponent, EmployeeComponent],\r\n    bootstrap: [AppComponent],\r\n    providers: [\r\n        { provide: APP_BASE_HREF, useValue: '/' },\r\n        { provide: JWT_OPTIONS, useValue: JWT_OPTIONS },\r\n        JwtHelperService,\r\n        { provide: HTTP_INTERCEPTORS, useClass: ApiHeaderInterceptor, multi: true }\r\n    ]\r\n})\r\nexport class AppModule { }","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Department } from '../entity/department';\r\nimport { Employee } from '../entity/employee';\r\n\r\n\r\n@Component({\r\n    selector: 'department',\r\n    // ��� ����������� ������ ������������� � ����������� ������������ � ����������� � ���� ������ ���������� � ����������� ������ \"����������� ���������\"\r\n    templateUrl: './department.component.html',\r\n    styleUrls: ['./department.component.css']\r\n})\r\nexport class DepartmentComponent  {\r\n\r\n    // ������ �������������\r\n    @Input() departments: Department[];\r\n\r\n    @Output() empEvent = new EventEmitter<Employee>();\r\n    \r\n    constructor() {\r\n    }\r\n\r\n    // �������� ������ � ���������� ��� �������� ���� ������� � ������������ ���������\r\n    showEmployee(employee) {\r\n        this.empEvent.emit(employee);\r\n    }\r\n}","<ul class=\"list\">\r\n    <ng-container *ngFor=\"let department of departments\">\r\n        <li>\r\n            <strong>{{department.fullName}}</strong>\r\n\r\n            <div *ngIf=\"department.positions\">\r\n                <div class=\"position\" *ngFor=\"let position of department.positions\">\r\n                    <span class=\"position\">{{position.name}}:</span>\r\n                    <div *ngIf=\"position.employees.length > 0\">\r\n                        <a class=\"employee\" *ngFor=\"let employee of position.employees\" (click)=\"showEmployee(employee)\">\r\n                            {{employee.fio}}\r\n                        </a>\r\n                    </div>\r\n                    <div *ngIf=\"position.employees.length < 1\">\r\n                        <p class=\"vacant\">Вакантная должность</p>\r\n                    </div>\r\n                </div>                \r\n            </div>\r\n        </li>\r\n\r\n        <li class=\"sublist\" *ngIf=\"department.childrens.length\">\r\n            <department (empEvent)=\"showEmployee($event)\" [departments]=\"department.childrens\"></department>\r\n        </li>\r\n    </ng-container>\r\n</ul>","import { Component, OnInit, Input, SimpleChanges } from '@angular/core';\r\nimport { DataService } from '../service/data.service';\r\nimport { Employee } from '../entity/employee';\r\n\r\n@Component({\r\n    selector: 'employee',\r\n    templateUrl: './employee.component.html',\r\n    styleUrls: ['./employee.component.css']\r\n})\r\n\r\nexport class EmployeeComponent {\r\n\r\n    @Input('emp') e: Employee;\r\n\r\n    emp: any;\r\n\r\n    constructor(private dataService: DataService) {\r\n        \r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.e) {\r\n            this.emp = this.getEmployee(this.e.id);\r\n        }        \r\n    }\r\n\r\n    // ����������� ��������� � ������ ��������� 'e' �� ����� �� ����������\r\n    ngOnChanges() {\r\n       this.ngOnInit();\r\n    }\r\n\r\n    // ��������� ������ ���������� ����� ������\r\n    getEmployee(id: number) {\r\n        return this.dataService.getEmployeeById(id).subscribe((data: Employee) => this.emp = data);\r\n    }\r\n\r\n    // �������������� ���� ���������� � �������\r\n    formateDate(date) {\r\n        let data = new Date(date);        \r\n        return data.toLocaleDateString();\r\n    }\r\n}\r\n","<div class=\"container employee-card\" *ngIf=\"emp\">\r\n    <div class=\"row \">\r\n        <div class=\"col-md-2\">\r\n            <img src=\"{{emp.photoPath}}\" alt=\"{{emp.fio}}\" />\r\n        </div>\r\n        <div class=\"col-md-10\">\r\n            <h1>{{emp.fio}}</h1>\r\n            <ul>\r\n                <li>Рабочий телефон: <a href=\"tel:{{emp.phone}}\">{{emp.phone}}</a></li>\r\n                <li>Мобильный телефон: <a href=\"tel:{{emp.mobilePhone}}\">{{emp.mobilePhone}}</a></li>\r\n                <li>Подразделение: {{emp.position.department.fullName}}</li>\r\n                <li>Должность: {{emp.position.name}}</li>\r\n                <li>Дата рождения: {{formateDate(emp.birthDate)}}</li>\r\n            </ul>\r\n        </div>\r\n    </div>    \r\n</div>\r\n<div class=\"container align-content-center\" *ngIf=\"!emp\">\r\n    <strong class=\"\">Выберите сотрудника из списка</strong>  \r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../service/data.service';\r\nimport { AuthService } from '../service/auth.service';\r\nimport { Department } from '../entity/department';\r\nimport { Employee } from '../entity/employee';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'home',\r\n    templateUrl: './home.component.html',\r\n    styleUrls: ['./home.component.css'],\r\n    providers: [DataService]\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n    departments: Department[];\r\n\r\n    emp: Employee;\r\n\r\n    isAuthenticated: boolean;\r\n\r\n    constructor(private dataService: DataService, private authService: AuthService, private route: Router) { }\r\n\r\n    ngOnInit() {\r\n        this.isAuthenticated = this.authService.isAuthenticated();\r\n        if (this.isAuthenticated) {\r\n            this.loadDepartments();    // �������� ������ ��� ������ ����������  \r\n        }\r\n        else {\r\n            this.route.navigate(['login']); // �������������� �������� �� �������� ������\r\n        }\r\n    }\r\n    // �������� ������ ����� ������\r\n    loadDepartments() {\r\n        this.dataService.getRootDepartments()\r\n            .subscribe((data: Department[]) => this.departments = data);\r\n    }\r\n\r\n    // �������� ������ �� ��������� ���������� ��� �������� �������� ����������\r\n    showEmployee(employee: Employee) {\r\n        this.emp = employee;\r\n    }\r\n}\r\n","<div class=\"container mb-5 pb-4\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-5\">\r\n            <department (empEvent)=\"showEmployee($event)\" [departments]=\"departments\">\r\n\r\n            </department>\r\n        </div>\r\n        <div class=\"col-md-7\">\r\n            <employee [emp]=\"emp\">\r\n\r\n            </employee>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { AuthService } from '../service/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\nexport class Account {\r\n    constructor(public email: string, public password: number) {\r\n\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.css']\r\n})\r\n\r\n\r\nexport class LoginComponent implements OnInit {\r\n\r\n    // ������ ��� ����� �������������� �� ���������\r\n    loginForm: any = {\r\n        email: 'ivanov@mail.ru',\r\n        password: '1234',\r\n    }\r\n\r\n    constructor(private auth: AuthService, private router: Router) { }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    // ������� ����� � �������. � ������ �������� �������������� ���������� �� ������� ��������\r\n    SignIn() {\r\n        this.auth.login(this.loginForm.email, this.loginForm.password)\r\n            .subscribe(res => {\r\n                this.router.navigate(['']);\r\n            }, error => {\r\n                alert(\"������ ��������������\");\r\n                this.router.navigate(['login']);\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\n","<main>\r\n    <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-9 col-md-7 col-lg-5 mx-auto\">\r\n                <div class=\"card border-0 shadow rounded-3 my-5\">\r\n                    <div class=\"card-body p-4 p-sm-5\">\r\n                        <h5 class=\"card-title text-center mb-4 fw-light fs-5\">Вход</h5>\r\n                        <form>\r\n                            <div class=\"form-floating mb-3\">\r\n                                <input type=\"email\" [(ngModel)]=\"loginForm.email\" class=\"form-control\" id=\"email\" name=\"email\" required>\r\n                                <label for=\"email\">Электронная почта</label>\r\n                            </div>\r\n                            <div class=\"form-floating mb-3\">\r\n                                <input type=\"password\" [(ngModel)]=\"loginForm.password\" class=\"form-control\" id=\"password\" name=\"password\" required>\r\n                                <label for=\"password\">Пароль</label>\r\n                            </div>\r\n                            <div class=\"d-grid\">\r\n                                <button (click)=\"SignIn()\" class=\"btn btn-primary btn-login text-uppercase fw-bold\" type=\"submit\">\r\n                                    Войти\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>    \r\n</main>","import { Component, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Employee } from '../entity/employee';\r\nimport { AuthService } from '../service/auth.service';\r\nimport { DataService } from '../service/data.service';\r\n\r\n@Component({\r\n    selector: 'app-nav-menu',\r\n    templateUrl: './nav-menu.component.html',\r\n    styleUrls: ['./nav-menu.component.css'],\r\n    providers: [DataService]\r\n})\r\nexport class NavMenuComponent {\r\n\r\n    // ������ ������������������� ������������\r\n    authorizeEmployee;\r\n        \r\n    @Input('isAuthenticated') isauthenticated: boolean;\r\n\r\n    constructor(private router: Router, private auth: AuthService, private data: DataService) {        \r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.isauthenticated) {            \r\n            this.authorizeEmployee = this.data.getGetAuthorizeEmployee().subscribe((data: Employee) => this.authorizeEmployee = data);\r\n        }        \r\n    }\r\n\r\n    // ����������� ��������� � ������ ��������� 'isauthenticated'\r\n    ngOnChanges() {\r\n        this.ngOnInit();\r\n    }\r\n    \r\n    // ������� �������. �������������� �������� �� �������� ������\r\n    LogOut() {\r\n        this.auth.logout();\r\n        this.router.navigate(['login']);\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a [routerLink]=\"['']\" class=\"navbar-brand\">Телефонный справочник</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar-list-4\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbar-list-4\">\r\n            <ul class=\"navbar-nav ml-auto\">\r\n                <li class=\"nav-item\" *ngIf=\"!isauthenticated\">\r\n                    <a class=\"nav-link\" [routerLink]=\"['/login']\"><span class=\"fas fa-sign-in-alt\"></span>Вход</a>\r\n                </li>\r\n                <li class=\"nav-item dropdown\" *ngIf=\"isauthenticated\">\r\n                    <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        <img src=\"{{authorizeEmployee.photoPath}}\" width=\"30\" height=\"30\" class=\"rounded-circle\">\r\n                    </a>\r\n                    <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\r\n                        <span class=\"name\">{{authorizeEmployee.fio}}</span>\r\n                        <a class=\"dropdown-item\" href=\"#\" (click)=\"LogOut()\">Выход</a>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </nav>    \r\n</div>\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse} from '@angular/common/http'\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { AuthService } from '../service/auth.service';\r\n\r\n\r\n@Injectable()\r\n\r\nexport class ApiHeaderInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private auth: AuthService) { }\r\n\r\n    // перехватываем все http запросы для установки токена авторизации\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        let token = this.auth.getToken();\r\n        const bearer = 'Bearer ' + token;\r\n\r\n        if (bearer) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    'Authorization': bearer,\r\n                }\r\n            });\r\n        }\r\n\r\n        return next.handle(request)\r\n            .pipe(\r\n                tap(event => {\r\n                    if (event instanceof HttpResponse) {\r\n                    }\r\n                }, error => {\r\n\r\n                })\r\n            );\r\n\r\n    };\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { Router } from '@angular/router';\r\nimport { Token } from '../entity/token';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Department } from '../entity/department';\r\n\r\nexport const ACCESS_TOKEN_KEY = 'access_token';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private jwtHelper: JwtHelperService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    // ����� ����������� ��������������\r\n    url = '/api/auth/login';\r\n\r\n    // ������� ������\r\n    public login(email: string, password: string) {\r\n        \r\n        return this.http.post<Token>(this.url, { email, password })\r\n            .pipe(tap(token => {\r\n                localStorage.setItem(ACCESS_TOKEN_KEY, token.access_token)\r\n            })\r\n        )        \r\n    }\r\n\r\n    // �������� ��������������\r\n    isAuthenticated(): boolean {\r\n        var token = localStorage.getItem(ACCESS_TOKEN_KEY);\r\n        return token && !this.jwtHelper.isTokenExpired(token);\r\n    }\r\n\r\n    // ������\r\n    logout(): void {\r\n        localStorage.removeItem(ACCESS_TOKEN_KEY);        \r\n    }\r\n\r\n    // ��������� ������. ������������ � ������������ http �������� ��� ��������� ��������� ��������������\r\n    getToken() {\r\n        var token = localStorage.getItem(ACCESS_TOKEN_KEY);\r\n        return token;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/internal/operators/map';\r\nimport { Employee } from '../entity/employee';\r\n\r\n@Injectable()\r\nexport class DataService {\r\n\r\n    // Адрес контроллера подразделений\r\n    private departmentsUrl = \"/api/departments\";\r\n    // Адрес контроллера сотрудников\r\n    private employeeUrl = \"/api/employee\";\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    // Функция получения корневого подразделения\r\n    getRootDepartments() {\r\n        return this.http.get(this.departmentsUrl + '/getrootdepartments');\r\n    }\r\n    // Функция получения сотрудника по идентификатору\r\n    getEmployeeById(id: number) {\r\n        return this.http.get(this.employeeUrl + '/getbyid?id=' + id);\r\n    }\r\n    // Функция получения аутентифицированного сотрудника\r\n    getGetAuthorizeEmployee() {\r\n        return this.http.get(this.employeeUrl + '/getauthorizeemployee');\r\n    }\r\n}","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { AppModule } from './app/app.module';\r\n\r\nenableProdMode();\r\nconst platform = platformBrowserDynamic();\r\nplatform.bootstrapModule(AppModule);"]}